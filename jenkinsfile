pipeline {
    agent any
    tools {
        terraform 'terraform-15'
    }

    parameters {
        string(name: 'environment', defaultValue: 'default',
        description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'autoApprove', defaultValue: false,
        description: 'Automatically run apply after generating plan?')
        booleanParam(name: 'destroy', defaultValue: false,
        description: 'destroy resources before build?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_IN_AUTOMATION      = '1'
    }

    stages {
        stage('Destroy') {
            when {
                    equals expected: true, actual: params.destroy
            }
            steps {
                sh label: '', script: 'terraform destroy -auto-approve '
            }
        }

        stage('Git checkout') {
            steps {
                git 'https://github.com/ajumanoh/terraform_aws_fullstack'
            }
        }

        stage('Plan') {
            steps {
                script {
                    currentBuild.displayName = params.version
                }
                sh label: '', script: 'terraform init'
                sh label: '', script: 'terraform workspace select ${environment}'
                sh label: '', script: 'terraform plan -out tfplan'
                sh label: '', script: 'terraform show -no-color tfplan > tfplan.txt'
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: 'Do you want to apply the plan?',
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            steps {
                sh label: '', script: 'terraform apply -input=false tfplan'
            }
        }
    }
    post {
        success {
            sh label: '', script: "echo 'Send email on success'"
        }
        failure {
            sh label: '', script: "echo 'Send email on failure'"
        }
    }
}
